test('shows no tasks message when there are no tasks', async () => {
    AsyncStorage.getItem.mockResolvedValue('123'); // Mock userId
    axios.get.mockResolvedValueOnce({ data: [] });
    axios.get.mockResolvedValueOnce({ data: [] });

    const { getByText } = renderComponent();

    await waitFor(() => {
      expect(getByText('All tasks completed!')).toBeTruthy();
    });
  });

  test('opens and closes filter modal', async () => {
    const { getByText, getByRole, queryByText } = renderComponent();

    // Open filter modal
    const filterButton = getByRole('button', { name: /filter-list/i });
    fireEvent.press(filterButton);

    await waitFor(() => {
      expect(getByText('Filter Tasks')).toBeTruthy();
    });

    // Close filter modal
    const closeButton = getByText('Close');
    fireEvent.press(closeButton);

    await waitFor(() => {
      expect(queryByText('Filter Tasks')).toBeNull();
    });
  });

  test('applies filters and fetches tasks', async () => {
    AsyncStorage.getItem.mockResolvedValue('123'); // Mock userId
    axios.get.mockResolvedValueOnce({ data: mockTasks });
    axios.get.mockResolvedValueOnce({ data: mockSharedTasks });

    const { getByText, getByRole, getByLabelText } = renderComponent();

    // Open filter modal
    const filterButton = getByRole('button', { name: /filter-list/i });
    fireEvent.press(filterButton);

    // Apply High priority filter
    const highPriorityCheckbox = getByLabelText('High');
    fireEvent.press(highPriorityCheckbox);

    // Apply filters
    const applyButton = getByText('Apply Filters');
    fireEvent.press(applyButton);

    await waitFor(() => {
      expect(axios.get).toHaveBeenCalledTimes(2); // One for each fetchTasks and fetchSharedTasks
    });
  });

  test('renders task details in modal', async () => {
    AsyncStorage.getItem.mockResolvedValue('123'); // Mock userId
    axios.get.mockResolvedValueOnce({ data: mockTasks });
    axios.get.mockResolvedValueOnce({ data: mockSharedTasks });

    const { getByText } = renderComponent();

    await waitFor(() => {
      expect(getByText('Task 1')).toBeTruthy();
    });

    // Open task modal
    fireEvent.press(getByText('Task 1'));

    await waitFor(() => {
      expect(getByText('Description 1')).toBeTruthy();
      expect(getByText('Due Date: September 1, 2024')).toBeTruthy();
    });

    // Close task modal
    fireEvent.press(getByText('Close'));
    await waitFor(() => {
      expect(getByText('Task 1')).toBeTruthy(); // Just to ensure we're back to the main screen
    });
  });

  test('completes a task', async () => {
    AsyncStorage.getItem.mockResolvedValue('123'); // Mock userId
    axios.get.mockResolvedValueOnce({ data: mockTasks });
    axios.get.mockResolvedValueOnce({ data: mockSharedTasks });

    axios.put = jest.fn().mockResolvedValueOnce({});

    const { getByText } = renderComponent();

    await waitFor(() => {
      expect(getByText('Task 1')).toBeTruthy();
    });

    // Complete task
    fireEvent.press(getByText('Complete'));

    await waitFor(() => {
      expect(axios.put).toHaveBeenCalledWith(`${baseURL}:3001/resources/completeTask/1`);
    });

    // Check if the success message is displayed (depends on Alert handling)
    await waitFor(() => {
      expect(getByText('Task marked as completed!')).toBeTruthy();
    });
  });